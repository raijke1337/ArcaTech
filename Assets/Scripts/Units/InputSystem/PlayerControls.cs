//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Units/InputSystem/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Game"",
            ""id"": ""a2175133-0639-46e1-85f6-af389ba464f6"",
            ""actions"": [
                {
                    ""name"": ""WASD"",
                    ""type"": ""Value"",
                    ""id"": ""e1dc2b4b-9f42-4aef-8911-12736512847b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UseMeleeSkill"",
                    ""type"": ""Button"",
                    ""id"": ""bfd0dbeb-7ca0-4e47-bd96-58cb6786a09d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseRangedSkill"",
                    ""type"": ""Button"",
                    ""id"": ""e2917fca-79e3-4182-bf7b-96c2ec7e5061"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseShieldSkill"",
                    ""type"": ""Button"",
                    ""id"": ""f0f3862b-e0cd-4e33-967e-fe7cc6fe6044"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""fe54560b-7bd0-45b7-bf9c-f5d72f3ea0eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseDodgeSkill"",
                    ""type"": ""Button"",
                    ""id"": ""dc59ae78-b565-45db-9c63-afd7d5a4a4a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MainAttack"",
                    ""type"": ""Button"",
                    ""id"": ""d45a1719-ff0a-4fa6-8db8-b280e4a19447"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RangedAttack"",
                    ""type"": ""Button"",
                    ""id"": ""e9c23c4d-a739-4ae0-8b74-c3ffdef73b6d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""b5fc2ab7-72da-4da8-b113-26745a684b5a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""fa67abf7-db6f-4647-92c3-22d959f31839"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Mount"",
                    ""type"": ""Button"",
                    ""id"": ""15eca33c-4683-4ad2-a4d6-18b36102cf02"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""f1adefd3-de1e-472c-91ef-fa679fc13d88"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""480496d9-20ed-4a3b-aa66-3a330dd86c75"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4f81c151-9c8e-401c-af6d-9ef0e6de87d4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b4e89c35-f8dd-4f44-a58b-39945439141b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5191f12a-c6e1-4b4a-bed5-c256f95ec034"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3997acb2-927d-40e6-9910-02eb38948d6b"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseMeleeSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b3fe82c4-6cfe-4cff-b764-8c513fbe9173"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea33ecec-6802-494f-9532-7a0b46e38fce"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseDodgeSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec6c3874-581d-41f5-b5a9-07b89654ac68"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseRangedSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f9336bd-7f91-4611-a546-95a6244ef73c"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseShieldSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa95f088-fd79-42f1-a62f-715621b94816"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MainAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d9e2a57-7241-4427-8dc7-f980ecca1ac2"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RangedAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8622000-275c-4d53-b0fa-8e356b727018"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6917a357-b112-45e3-ae3b-31c7897b45fe"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa17cbf8-f841-48ac-b8a5-2acc3159fa41"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mount"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Game
        m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
        m_Game_WASD = m_Game.FindAction("WASD", throwIfNotFound: true);
        m_Game_UseMeleeSkill = m_Game.FindAction("UseMeleeSkill", throwIfNotFound: true);
        m_Game_UseRangedSkill = m_Game.FindAction("UseRangedSkill", throwIfNotFound: true);
        m_Game_UseShieldSkill = m_Game.FindAction("UseShieldSkill", throwIfNotFound: true);
        m_Game_Pause = m_Game.FindAction("Pause", throwIfNotFound: true);
        m_Game_UseDodgeSkill = m_Game.FindAction("UseDodgeSkill", throwIfNotFound: true);
        m_Game_MainAttack = m_Game.FindAction("MainAttack", throwIfNotFound: true);
        m_Game_RangedAttack = m_Game.FindAction("RangedAttack", throwIfNotFound: true);
        m_Game_Jump = m_Game.FindAction("Jump", throwIfNotFound: true);
        m_Game_Aim = m_Game.FindAction("Aim", throwIfNotFound: true);
        m_Game_Mount = m_Game.FindAction("Mount", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Game
    private readonly InputActionMap m_Game;
    private List<IGameActions> m_GameActionsCallbackInterfaces = new List<IGameActions>();
    private readonly InputAction m_Game_WASD;
    private readonly InputAction m_Game_UseMeleeSkill;
    private readonly InputAction m_Game_UseRangedSkill;
    private readonly InputAction m_Game_UseShieldSkill;
    private readonly InputAction m_Game_Pause;
    private readonly InputAction m_Game_UseDodgeSkill;
    private readonly InputAction m_Game_MainAttack;
    private readonly InputAction m_Game_RangedAttack;
    private readonly InputAction m_Game_Jump;
    private readonly InputAction m_Game_Aim;
    private readonly InputAction m_Game_Mount;
    public struct GameActions
    {
        private @PlayerControls m_Wrapper;
        public GameActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @WASD => m_Wrapper.m_Game_WASD;
        public InputAction @UseMeleeSkill => m_Wrapper.m_Game_UseMeleeSkill;
        public InputAction @UseRangedSkill => m_Wrapper.m_Game_UseRangedSkill;
        public InputAction @UseShieldSkill => m_Wrapper.m_Game_UseShieldSkill;
        public InputAction @Pause => m_Wrapper.m_Game_Pause;
        public InputAction @UseDodgeSkill => m_Wrapper.m_Game_UseDodgeSkill;
        public InputAction @MainAttack => m_Wrapper.m_Game_MainAttack;
        public InputAction @RangedAttack => m_Wrapper.m_Game_RangedAttack;
        public InputAction @Jump => m_Wrapper.m_Game_Jump;
        public InputAction @Aim => m_Wrapper.m_Game_Aim;
        public InputAction @Mount => m_Wrapper.m_Game_Mount;
        public InputActionMap Get() { return m_Wrapper.m_Game; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
        public void AddCallbacks(IGameActions instance)
        {
            if (instance == null || m_Wrapper.m_GameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameActionsCallbackInterfaces.Add(instance);
            @WASD.started += instance.OnWASD;
            @WASD.performed += instance.OnWASD;
            @WASD.canceled += instance.OnWASD;
            @UseMeleeSkill.started += instance.OnUseMeleeSkill;
            @UseMeleeSkill.performed += instance.OnUseMeleeSkill;
            @UseMeleeSkill.canceled += instance.OnUseMeleeSkill;
            @UseRangedSkill.started += instance.OnUseRangedSkill;
            @UseRangedSkill.performed += instance.OnUseRangedSkill;
            @UseRangedSkill.canceled += instance.OnUseRangedSkill;
            @UseShieldSkill.started += instance.OnUseShieldSkill;
            @UseShieldSkill.performed += instance.OnUseShieldSkill;
            @UseShieldSkill.canceled += instance.OnUseShieldSkill;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @UseDodgeSkill.started += instance.OnUseDodgeSkill;
            @UseDodgeSkill.performed += instance.OnUseDodgeSkill;
            @UseDodgeSkill.canceled += instance.OnUseDodgeSkill;
            @MainAttack.started += instance.OnMainAttack;
            @MainAttack.performed += instance.OnMainAttack;
            @MainAttack.canceled += instance.OnMainAttack;
            @RangedAttack.started += instance.OnRangedAttack;
            @RangedAttack.performed += instance.OnRangedAttack;
            @RangedAttack.canceled += instance.OnRangedAttack;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Aim.started += instance.OnAim;
            @Aim.performed += instance.OnAim;
            @Aim.canceled += instance.OnAim;
            @Mount.started += instance.OnMount;
            @Mount.performed += instance.OnMount;
            @Mount.canceled += instance.OnMount;
        }

        private void UnregisterCallbacks(IGameActions instance)
        {
            @WASD.started -= instance.OnWASD;
            @WASD.performed -= instance.OnWASD;
            @WASD.canceled -= instance.OnWASD;
            @UseMeleeSkill.started -= instance.OnUseMeleeSkill;
            @UseMeleeSkill.performed -= instance.OnUseMeleeSkill;
            @UseMeleeSkill.canceled -= instance.OnUseMeleeSkill;
            @UseRangedSkill.started -= instance.OnUseRangedSkill;
            @UseRangedSkill.performed -= instance.OnUseRangedSkill;
            @UseRangedSkill.canceled -= instance.OnUseRangedSkill;
            @UseShieldSkill.started -= instance.OnUseShieldSkill;
            @UseShieldSkill.performed -= instance.OnUseShieldSkill;
            @UseShieldSkill.canceled -= instance.OnUseShieldSkill;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @UseDodgeSkill.started -= instance.OnUseDodgeSkill;
            @UseDodgeSkill.performed -= instance.OnUseDodgeSkill;
            @UseDodgeSkill.canceled -= instance.OnUseDodgeSkill;
            @MainAttack.started -= instance.OnMainAttack;
            @MainAttack.performed -= instance.OnMainAttack;
            @MainAttack.canceled -= instance.OnMainAttack;
            @RangedAttack.started -= instance.OnRangedAttack;
            @RangedAttack.performed -= instance.OnRangedAttack;
            @RangedAttack.canceled -= instance.OnRangedAttack;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Aim.started -= instance.OnAim;
            @Aim.performed -= instance.OnAim;
            @Aim.canceled -= instance.OnAim;
            @Mount.started -= instance.OnMount;
            @Mount.performed -= instance.OnMount;
            @Mount.canceled -= instance.OnMount;
        }

        public void RemoveCallbacks(IGameActions instance)
        {
            if (m_Wrapper.m_GameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameActions instance)
        {
            foreach (var item in m_Wrapper.m_GameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameActions @Game => new GameActions(this);
    public interface IGameActions
    {
        void OnWASD(InputAction.CallbackContext context);
        void OnUseMeleeSkill(InputAction.CallbackContext context);
        void OnUseRangedSkill(InputAction.CallbackContext context);
        void OnUseShieldSkill(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnUseDodgeSkill(InputAction.CallbackContext context);
        void OnMainAttack(InputAction.CallbackContext context);
        void OnRangedAttack(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnMount(InputAction.CallbackContext context);
    }
}
